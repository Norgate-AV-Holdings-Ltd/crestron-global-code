/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:   Solo Works London
System Name:   Internal Modules
System Number: 
Programmer:    Sam Shelton
Comments: Handles communication with Cisco VC units on firmware 9.5+
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Cisco VC Control Module"
#HINT "Handles communication with Cisco VC units on firmware 9.5+"
// #DEFINE_CONSTANT
// #CATEGORY "Video Conferencing" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Debug;
DIGITAL_INPUT InitComms;
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT WAKE;
DIGITAL_INPUT SLEEP; 
BUFFER_INPUT _SKIP_;
BUFFER_INPUT Rx[2000];

DIGITAL_OUTPUT WAKE_FB;
DIGITAL_OUTPUT SLEEP_FB;
STRING_OUTPUT _SKIP_;
STRING_OUTPUT UI_EVENT_PRESSED;
STRING_OUTPUT UI_EVENT_RELEASED;
STRING_OUTPUT UI_EVENT_CLICK;
STRING_OUTPUT UI_EVENT_CHANGED;
STRING_OUTPUT _SKIP_;
STRING_OUTPUT Tx;


/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function fnDebug(STRING msg, STRING detail){
    TRACE("CiscoSX: [%s] [%s]",msg,detail);
}

Function fnInitComms(){
  WAIT(200,waitInit){
    Tx = "xfeedback register /event/userinterface/extensions/event\n";
  }
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH InitComms{
	Tx = "xfeedback register /event/userinterface/extensions/event\n";
	Tx = "xfeedback register /Status/Standby\n";
}

CHANGE Rx{
	STRING Line[250];
	STRING Chunk[250];
  TRACE("[%s]",Rx);

  WHILE(FIND("\n",Rx)>0){
    Line = REMOVE("\n",Rx);
    Line = LEFT(Line,LEN(Line)-2);  // Remove \n
    fnDebug("Line",Line);
    Chunk = REMOVE(" ",Line);
    Chunk = LEFT(Chunk,LEN(Chunk)-1); // Remove Space
    fnDebug("Chunk",Chunk);
    IF(Chunk = "**"){
      fnDebug("FB","Misc");
    }
    ELSE IF(Chunk = "*e"){
      fnDebug("FB","Event");
      Chunk = REMOVE(" ",Line);
      Chunk = LEFT(Chunk,LEN(Chunk)-1);
      IF(chunk = "UserInterface"){
        fnDebug("FB","UserInterface");
        Chunk = REMOVE(" ",Line);
        Chunk = LEFT(Chunk,LEN(Chunk)-1);
        IF(chunk = "Extensions"){
          fnDebug("FB","Extensions");
          Chunk = REMOVE(" ",Line);
          Chunk = LEFT(Chunk,LEN(Chunk)-1);
          IF(chunk = "Event"){
            fnDebug("FB","Event");
            Chunk = REMOVE(" ",Line);
            Chunk = LEFT(Chunk,LEN(Chunk)-1);
            IF(chunk = "Clicked"){
              fnDebug("FB","Clicked");
              Chunk = REMOVE(" ",Line);
              Chunk = LEFT(Chunk,LEN(Chunk)-1);
              IF(chunk = "Signal:"){
                fnDebug("FB","Signal");
                UI_EVENT_CLICK = Line;
              }
            }
            ELSE IF(chunk = "Pressed"){
              fnDebug("FB","Pressed");
              Chunk = REMOVE(" ",Line);
              Chunk = LEFT(Chunk,LEN(Chunk)-1);
              IF(chunk = "Signal:"){
                fnDebug("FB","Signal");
                UI_EVENT_PRESSED = Line;
              }
            }
            ELSE IF(chunk = "Released"){
              fnDebug("FB","Released");
              Chunk = REMOVE(" ",Line);
              Chunk = LEFT(Chunk,LEN(Chunk)-1);
              IF(chunk = "Signal:"){
                fnDebug("FB","Signal");
                UI_EVENT_RELEASED = Line;
              }
            }
            ELSE IF(chunk = "Changed"){
              fnDebug("FB","Released");
              Chunk = REMOVE(" ",Line);
              Chunk = LEFT(Chunk,LEN(Chunk)-1);
              IF(chunk = "Signal:"){
                fnDebug("FB","Signal");
                UI_EVENT_CHANGED = Line;
              }
            }
          }
        }
      }
    }
    ELSE IF(chunk = "*r"){
      TRACE("%s","Result Feedback");
    }
	ELSE IF(chunk = "*s"){
	  fnDebug("FB","Status");
      Chunk = REMOVE(" ",Line);
      Chunk = LEFT(Chunk,LEN(Chunk)-1);
      IF(chunk = "Standby"){
        fnDebug("FB","Standby");
        Chunk = REMOVE(" ",Line);
        Chunk = LEFT(Chunk,LEN(Chunk)-1);
		IF(chunk = "State:"){
        fnDebug("FB","State:");

        IF(chunk = "Off"){
          fnDebug("FB","Off");
          WAKE_FB  = 0;
		  SLEEP_FB = 1;
		}
        IF(chunk = "Standby"){
          fnDebug("FB","Standby");
          WAKE_FB  = 1;
		  SLEEP_FB = 0;      
		  }
		}
      }
	}		
  }

	//*e UserInterface Extensions Event Clicked Signal: "ProjectorPowerOn"\x0D\x0A
	//*e UserInterface Extensions Event Clicked Signal: "ProjectorPowerOff"\x0D\x0A
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

