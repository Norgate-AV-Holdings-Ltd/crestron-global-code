/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:   Solo Works London
System Name:
System Number:
Programmer:    Sam Shelton
Comments:      Simple module for control of Philips Commercial Display
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Debug;
DIGITAL_INPUT Init;
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT POWER_ON;
DIGITAL_INPUT POWER_OFF;
DIGITAL_INPUT _SKIP_;
STRING_INPUT  DeviceRx[2000];

DIGITAL_OUTPUT COMMS_ACTIVE;
DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT POWER;
DIGITAL_OUTPUT _SKIP_;
STRING_OUTPUT DeviceTx;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT ipSocket[500];
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function fnDebug(STRING msg, STRING detail){
  IF(Debug = 1){
    TRACE("Philips: [%s] [%s]",msg,detail);
  }
}

Function fnPoll(){
    // Power State
    DeviceTx = "\x05\x01\x00\x19\x1D";// Brodcast ID
    //DeviceTx = "\x05\x01\x01\x19\x1C";// ID 01
    // Power State
    delay(10);
    //DeviceTx = "\x05\x01\x01\x19\x1E";
}
Function fnDelayPoll(){
  // Restart Wait process
  WAIT(10000,pollWait){
    fnPoll();
    // Cancel current Wait if live
   fnDelayPoll();
  }
}


Function fnInitPoll(){
  CancelWait(pollWait);
  fnDelayPoll();
}

Function fnInitComms(){
  WAIT(30000,commsWait){
    COMMS_ACTIVE = 0;
  }
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH POWER_OFF{
  DeviceTx = "\x06\x01\x00\x18\x01\x1E";
  fnInitPoll();
}

PUSH POWER_ON{
  DeviceTx = "\x06\x01\x00\x18\x02\x1D";
  fnInitPoll();
}

PUSH Init{
 fnPoll();
 fnInitPoll();
}

CHANGE DeviceRx{
  COMMS_ACTIVE = 1;
  CancelWait(commsWait);
  fnInitComms();

  IF(DeviceRx = "\x06\x01\x01\x19\x02\x1D"){
    POWER = 1;
    IF(POWER_OFF = 1){
      DeviceTx = "\x06\x01\x00\x18\x01\x1E";
    }
  }

  IF(DeviceRx = "\x06\x01\x01\x19\x01\x1E"){
    POWER = 0;
    IF(POWER_ON = 1){ 
      DeviceTx = "\x06\x01\x00\x18\x02\x1D";
    }
  }
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main(){
  
}


