/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:   Solo Works London
System Name:   Internal Modules
System Number: 
Programmer:    Sam Shelton
Comments: Handles ExternalSources on Touch10
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Cisco VC Touch10 External Sources"
#HINT "Handles communication with Cisco VC units on firmware 9.5+"
// #DEFINE_CONSTANT
// #CATEGORY "Video Conferencing" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Init,Debug,_SKIP_;
DIGITAL_INPUT SOURCE_HIDE,SOURCE_READY[10,10];
STRING_INPUT  _SKIP_;
STRING_INPUT  ModuleRx[2000];

DIGITAL_OUTPUT InitNext,_SKIP_,_SKIP_,_SKIP_;
DIGITAL_OUTPUT SOURCE_SELECTED[10,10];
STRING_OUTPUT _SKIP_;
STRING_OUTPUT ModuleTx;


/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER _SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_;
INTEGER_PARAMETER _SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_;
INTEGER_PARAMETER _SKIP_,_SKIP_,_SKIP_;
INTEGER_PARAMETER SOURCE_INPUT_ID;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER SOURCE_NAME[10,10][20];
STRING_PARAMETER SOURCE_TYPE[10,10][20];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES SOURCE_INPUT_ID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 5d;
   propDefaultValue = 2d;
   propShortDescription = "ExtSourceName";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES SOURCE_NAME
  propDefaultUnit = unitString;
  propDefaultValue = "None";
  propShortDescription = "ExtSourceName";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES SOURCE_TYPE
   propDefaultValue = "other";
   propList = { "camera" , "camera" } ,
              { "desktop" , "desktop" } ,
              { "document_camera" , "document_camera" } ,
              { "mediaplayer" , "mediaplayer" } ,
              { "PC" , "PC" } ,
              { "whiteboard" , "whiteboard" } ,
              { "other" , "other" }   ;
   propShortDescription = "ExtSourceType";
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function fnDebug(STRING msg, STRING detail){
  IF(Debug = 1){
    TRACE("CiscoSX: [%s] [%s]",msg,detail);
  }
}

INTEGER x;
STRING MSG[200];

Function fnSetSourceState(INTEGER x){
  MSG = "xCommand UserInterface Presentation ExternalSource State Set SourceIdentifier: \"Source" + ITOA(x) + "\" State: ";
  IF(SOURCE_READY[x] = 1){
    ModuleTx = MSG + "Ready";
  }
  ELSE IF(SOURCE_HIDE = 1){
    ModuleTx = MSG + "Hidden";
  }
  ELSE{
    ModuleTx = MSG + "NotReady";
  }
  
}

Function fnRegister(){
  // Restart Wait process
  WAIT(200,waitInit){
    // Register for UserInterface Events
	  ModuleTx = "xfeedback register /Event/UserInterface";
    delay(10);
    // Remove any existing External Sources
    ModuleTx = "xCommand UserInterface Presentation ExternalSource RemoveAll";
    delay(10);
    // Add all declared External Sources
    for(x = 1 to 10){
      IF(SOURCE_NAME[x] != "None"){
        MSG = "xCommand UserInterface Presentation ExternalSource Add";
        MSG = MSG+" ConnectorId: "+ITOA(SOURCE_INPUT_ID);
        MSG = MSG+" SourceIdentifier: \"Source" + ITOA(x) + "\"";
        MSG = MSG+" Name: \"" + SOURCE_NAME[x] + "\"";
        MSG = MSG+" Type: " + SOURCE_TYPE[x];
        ModuleTx  = MSG;
        delay(10);
        fnSetSourceState(x);
        delay(10);
      }
    }
    // Trigger next in process
    pulse(1, InitNext);
  }
}

Function fnInitComms(){
  // Cancel current Wait if live
  CancelWait(waitInit);
  fnRegister();
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Init{
  fnInitComms();
}

CHANGE ModuleRx{
	STRING Line[250];
	STRING Chunk[250];
  Line = ModuleRx;
  fnDebug("Line",Line);
  Chunk = REMOVE(" ",Line);
  Chunk = LEFT(Chunk,LEN(Chunk)-1); // Remove Space
  fnDebug("Chunk",Chunk);
  IF(Chunk = "**"){
    fnDebug("FB","Misc");
  }
  ELSE IF(Chunk = "*e"){
    fnDebug("FB","Event");
    Chunk = REMOVE(" ",Line);
    Chunk = LEFT(Chunk,LEN(Chunk)-1);
    IF(chunk = "UserInterface"){
      Chunk = REMOVE(" ",Line);
      Chunk = LEFT(Chunk,LEN(Chunk)-1);
      IF(chunk = "Presentation"){
        Chunk = REMOVE(" ",Line);
        Chunk = LEFT(Chunk,LEN(Chunk)-1);
        IF(chunk = "ExternalSource"){
          Chunk = REMOVE(" ",Line);
          Chunk = LEFT(Chunk,LEN(Chunk)-1);
          IF(chunk = "Selected"){
            Chunk = REMOVE(" ",Line);
            Chunk = LEFT(Chunk,LEN(Chunk)-1);
            IF(chunk = "SourceIdentifier:"){
              chunk = mid(Line,2,LEN(Line)-2);
              PULSE(1,SOURCE_SELECTED[ATOI(chunk)]);
            }
          }
        }
      }
    }
  }
  ELSE IF(chunk = "*r"){
    fnDebug("FB","Status");
  }
  ELSE IF(chunk = "*s"){
    fnDebug("FB","Status");
  }		
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

