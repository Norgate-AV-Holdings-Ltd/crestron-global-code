/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:   Solo Works London
System Name:   Internal Modules
System Number: 
Programmer:    Sam Shelton
Comments: Handles communication with Cisco VC units on firmware 9.5+
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Cisco VC Touch10 UserInterface"
#HINT "Handles communication with Cisco VC units on firmware 9.5+"
// #DEFINE_CONSTANT
// #CATEGORY "Video Conferencing" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Init,Debug;
STRING_INPUT  _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_;
STRING_INPUT  ModuleRx[2000];

DIGITAL_OUTPUT InitNext;
STRING_OUTPUT _SKIP_,_SKIP_;
STRING_OUTPUT UI_EVENT_PRESSED;
STRING_OUTPUT UI_EVENT_RELEASED;
STRING_OUTPUT UI_EVENT_CLICK;
STRING_OUTPUT UI_EVENT_CHANGED;
STRING_OUTPUT _SKIP_;
STRING_OUTPUT ModuleTx;


/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING SOURCE_NAME_INT[10][20];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function fnDebug(STRING msg, STRING detail){
  IF(Debug = 1){
    TRACE("CiscoSX: [%s] [%s]",msg,detail);
  }
}

Function fnRegister(){
  // Restart Wait process
  WAIT(200,waitInit){
    // Register for UserInterface Events
	  ModuleTx = "xfeedback register /Event/UserInterface"; 
    delay(10);
    // Trigger next in process
    pulse(1, InitNext);
  }
}

Function fnInitComms(){
  // Cancel current Wait if live
  CancelWait(waitInit);
  fnRegister();
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Init{
  fnInitComms();
}

CHANGE ModuleRx{
	STRING Line[250];
	STRING Chunk[250];
  Line = ModuleRx;
  fnDebug("Line",Line);
  Chunk = REMOVE(" ",Line);
  Chunk = LEFT(Chunk,LEN(Chunk)-1); // Remove Space
  fnDebug("Chunk",Chunk);
  IF(Chunk = "**"){
    fnDebug("FB","Misc");
  }
  ELSE IF(Chunk = "*e"){
    fnDebug("FB","Event");
    Chunk = REMOVE(" ",Line);
    Chunk = LEFT(Chunk,LEN(Chunk)-1);
    IF(chunk = "UserInterface"){
      fnDebug("FB","UserInterface");
      Chunk = REMOVE(" ",Line);
      Chunk = LEFT(Chunk,LEN(Chunk)-1);
      IF(chunk = "Extensions"){
        fnDebug("FB","Extensions");
        Chunk = REMOVE(" ",Line);
        Chunk = LEFT(Chunk,LEN(Chunk)-1);
        IF(chunk = "Event"){
          fnDebug("FB","Event");
          Chunk = REMOVE(" ",Line);
          Chunk = LEFT(Chunk,LEN(Chunk)-1);
          IF(chunk = "Clicked"){
            fnDebug("FB","Clicked");
            Chunk = REMOVE(" ",Line);
            Chunk = LEFT(Chunk,LEN(Chunk)-1);
            IF(chunk = "Signal:"){
              fnDebug("FB","Signal");
              UI_EVENT_CLICK = Line;
            }
          }
          ELSE IF(chunk = "Pressed"){
            fnDebug("FB","Pressed");
            Chunk = REMOVE(" ",Line);
            Chunk = LEFT(Chunk,LEN(Chunk)-1);
            IF(chunk = "Signal:"){
              fnDebug("FB","Signal");
              UI_EVENT_PRESSED = Line;
            }
          }
          ELSE IF(chunk = "Released"){
            fnDebug("FB","Released");
            Chunk = REMOVE(" ",Line);
            Chunk = LEFT(Chunk,LEN(Chunk)-1);
            IF(chunk = "Signal:"){
              fnDebug("FB","Signal");
              UI_EVENT_RELEASED = Line;
            }
          }
          ELSE IF(chunk = "Changed"){
            fnDebug("FB","Released");
            Chunk = REMOVE(" ",Line);
            Chunk = LEFT(Chunk,LEN(Chunk)-1);
            IF(chunk = "Signal:"){
              fnDebug("FB","Signal");
              UI_EVENT_CHANGED = Line;
            }
          }
        }
      }
    }
  }
  ELSE IF(chunk = "*r"){
    
  }
  ELSE IF(chunk = "*s"){
    
  }
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

